#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('1w-6d:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */
var config = require('../config/server')

var http, port, server;

if (config.local.open) {
    http = require('http');
    port = config.local.port;
    server = http.createServer(app);
} else if (config.http.open) {
    http = require('http');
    port = config.http.port;
    server = http.createServer(app);
} else if (config.https.open) {
    http = require('https');
    port = config.https.port;
    var options = {
        key: fs.readFileSync('./bin/1826016_uncle9.top.key'),
        cert: fs.readFileSync('./bin/1826016_uncle9.top.pem'),
    };
    server = http.createServer(options, app);
}

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// SocketIO配置
const SOCKETIO = require('socket.io')
var _ = require('underscore');
const io = SOCKETIO.listen(server);//监听http实例，未来3000端口下的http请求，会触发socket

var socketArr = [];
io.on('connection', function (socket) {
    console.log(`新加入一个连接,Id是${socket.id}`);

    // socket.emit('chat message', 'i am ' + socket.id); //连接后在客户端进行自我介绍，是哪个一个socket.id
    // socketArr.push(socket.id); //把连接的socket.id都存入数组
    socket.on('loginInfo', function (msg) {
        // console.log(msg)
        socketArr.forEach((item,index) =>{
            if(item.openid === msg.openid){
                socketArr.splice(index,1)
            }
        })
        socketArr.push(msg)
        console.log(socketArr.length)
        console.log(socketArr)

        var index = socketArr.indexOf(socket.id); //获得数组的index
        var id = index == socketArr.length - 1 ? socketArr[0] : socketArr[index + 1]; //选择私信的目标socket.id。
        //这是就是1发给2， 2发给3， 3发给1.
        //按照首尾相连的顺序传递发送消息
        socket.to(id).emit('chat message', 'from ' + socket.id + ':' + msg + ' to ' + id); //消息发到指定socket.id的客户端，并且标明是谁发给谁的
    });

    socket.on('msg', function (data) {
        console.log('触发了msg')
        console.log(data)
        let { text, openid } = data;
        socketArr.forEach(item => {
            if (item.openid === openid) {
                //开始发送消息
                socket.to(item.socketid).emit('from message', text);
            }
        })
    })



     socket.on('disconnect', function (data) {
        console.log('断开一个连接。');
    });
    socket.on('discon', function (data) {
        console.log('断开一个连接。');
        // console.log(socketArr)
        console.log(data)
    });



});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

module.exports = io;

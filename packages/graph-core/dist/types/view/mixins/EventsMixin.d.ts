import InternalMouseEvent from '../event/InternalMouseEvent';
import CellState from '../cell/CellState';
import Cell from '../cell/Cell';
import Point from '../geometry/Point';
import EventSource from '../event/EventSource';
import type { MouseEventListener, MouseListenerSet } from '../../types';
declare module '../Graph' {
    interface Graph {
        mouseListeners: MouseListenerSet[];
        lastTouchEvent: MouseEvent | null;
        doubleClickCounter: number;
        lastTouchCell: Cell | null;
        fireDoubleClick: boolean | null;
        tapAndHoldThread: number | null;
        lastMouseX: number | null;
        lastMouseY: number | null;
        isMouseTrigger: boolean | null;
        ignoreMouseEvents: boolean | null;
        mouseMoveRedirect: MouseEventListener | null;
        mouseUpRedirect: MouseEventListener | null;
        lastEvent: any;
        escapeEnabled: boolean;
        invokesStopCellEditing: boolean;
        enterStopsCellEditing: boolean;
        isMouseDown: boolean;
        nativeDblClickEnabled: boolean;
        doubleTapEnabled: boolean;
        doubleTapTimeout: number;
        doubleTapTolerance: number;
        lastTouchX: number;
        lastTouchY: number;
        lastTouchTime: number;
        tapAndHoldEnabled: boolean;
        tapAndHoldDelay: number;
        tapAndHoldInProgress: boolean;
        tapAndHoldValid: boolean;
        initialTouchX: number;
        initialTouchY: number;
        tolerance: number;
        isNativeDblClickEnabled: () => boolean;
        getEventTolerance: () => number;
        setEventTolerance: (tolerance: number) => void;
        escape: (evt: Event) => void;
        click: (me: InternalMouseEvent) => boolean;
        dblClick: (evt: MouseEvent, cell?: Cell | null) => void;
        tapAndHold: (me: InternalMouseEvent) => void;
        addMouseListener: (listener: MouseListenerSet) => void;
        removeMouseListener: (listener: MouseListenerSet) => void;
        updateMouseEvent: (me: InternalMouseEvent, evtName: string) => InternalMouseEvent;
        getStateForTouchEvent: (evt: MouseEvent) => CellState | null;
        isEventIgnored: (evtName: string, me: InternalMouseEvent, sender: EventSource) => boolean;
        isSyntheticEventIgnored: (evtName: string, me: InternalMouseEvent, sender: any) => boolean;
        isEventSourceIgnored: (evtName: string, me: InternalMouseEvent) => boolean;
        getEventState: (state: CellState) => CellState;
        fireMouseEvent: (evtName: string, me: InternalMouseEvent, sender?: EventSource) => void;
        consumeMouseEvent: (evtName: string, me: InternalMouseEvent, sender: EventSource) => void;
        fireGestureEvent: (evt: MouseEvent, cell?: Cell | null) => void;
        sizeDidChange: () => void;
        isCloneEvent: (evt: MouseEvent) => boolean;
        isTransparentClickEvent: (evt: MouseEvent) => boolean;
        isToggleEvent: (evt: MouseEvent) => boolean;
        isGridEnabledEvent: (evt: MouseEvent) => boolean;
        isConstrainedEvent: (evt: MouseEvent) => boolean;
        isIgnoreTerminalEvent: (evt: MouseEvent) => boolean;
        getPointForEvent: (evt: MouseEvent, addOffset?: boolean) => Point;
        isEscapeEnabled: () => boolean;
        setEscapeEnabled: (value: boolean) => void;
        isInvokesStopCellEditing: () => boolean;
        setInvokesStopCellEditing: (value: boolean) => void;
        isEnterStopsCellEditing: () => boolean;
        setEnterStopsCellEditing: (value: boolean) => void;
        getCursorForMouseEvent: (me: InternalMouseEvent) => string | null;
        isSwimlaneSelectionEnabled: () => boolean;
    }
}

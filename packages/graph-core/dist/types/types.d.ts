import { DIRECTION } from './util/Constants';
import type Cell from './view/cell/Cell';
import type CellState from './view/cell/CellState';
import EventSource from './view/event/EventSource';
import type InternalMouseEvent from './view/event/InternalMouseEvent';
import type Shape from './view/geometry/Shape';
import type { Graph } from './view/Graph';
import type ImageBox from './view/image/ImageBox';
export declare type CellMap = {
    [id: string]: Cell;
};
export declare type FilterFunction = (cell: Cell) => boolean;
export declare type UndoableChange = {
    execute: () => void;
    undo?: () => void;
    redo?: () => void;
};
export declare type StyleValue = string | number;
export declare type Properties = {
    [k: string]: any;
};
export declare type CellStyle<S = string> = CellStateStyle<S> & {
    baseStyleNames?: string[];
};
export declare type CellStateStyle<S = string> = {
    absoluteArcSize?: number;
    align?: AlignValue;
    anchorPointDirection?: boolean;
    arcSize?: number;
    aspect?: string;
    autosize?: boolean;
    backgroundColor?: ColorValue;
    backgroundOutline?: number;
    bendable?: boolean;
    cloneable?: boolean;
    curved?: boolean;
    dashed?: boolean;
    dashPattern?: string;
    defaultEdge?: CellStateStyle;
    defaultVertex?: CellStateStyle;
    deletable?: boolean;
    direction?: DirectionValue;
    edgeStyle?: string;
    editable?: boolean;
    elbow?: string;
    endArrow?: ArrowType;
    endFill?: boolean;
    endSize?: number;
    entryDx?: number;
    entryDy?: number;
    entryPerimeter?: boolean;
    entryX?: number;
    entryY?: number;
    exitDx?: number;
    exitDy?: number;
    exitPerimeter?: boolean;
    exitX?: number;
    exitY?: number;
    fillColor?: ColorValue;
    fillOpacity?: number;
    fixDash?: boolean;
    flipH?: boolean;
    flipV?: boolean;
    foldable?: boolean;
    fontColor?: ColorValue;
    fontFamily?: string;
    fontSize?: number;
    fontStyle?: number;
    glass?: boolean;
    gradientColor?: ColorValue;
    gradientDirection?: DirectionValue;
    horizontal?: boolean;
    image?: string;
    imageAlign?: AlignValue;
    imageAspect?: boolean;
    imageBackground?: ColorValue;
    imageBorder?: ColorValue;
    imageHeight?: number;
    imageWidth?: number;
    indicatorColor?: ColorValue;
    indicatorDirection?: DirectionValue;
    indicatorHeight?: number;
    indicatorImage?: string;
    indicatorShape?: string;
    indicatorStrokeColor?: ColorValue;
    indicatorWidth?: number;
    jettySize?: number | 'auto';
    labelBackgroundColor?: ColorValue;
    labelBorderColor?: ColorValue;
    labelPadding?: number;
    labelPosition?: AlignValue;
    labelWidth?: number;
    loop?: Function;
    loopStyle?: Function;
    margin?: number;
    movable?: boolean;
    noEdgeStyle?: boolean;
    noLabel?: boolean;
    opacity?: number;
    orthogonal?: boolean | null;
    orthogonalLoop?: boolean;
    overflow?: OverflowValue;
    perimeter?: Function | string | null;
    perimeterSpacing?: number;
    pointerEvents?: boolean;
    portConstraint?: DIRECTION;
    portConstraintRotation?: DIRECTION;
    resizable?: boolean;
    resizeHeight?: boolean;
    resizeWidth?: boolean;
    rotatable?: boolean;
    rotation?: number;
    rounded?: boolean;
    routingCenterX?: number;
    routingCenterY?: number;
    segment?: number;
    separatorColor?: ColorValue;
    shadow?: boolean;
    shape?: ShapeValue<S>;
    sourceJettySize?: number | 'auto';
    sourcePerimeterSpacing?: number;
    sourcePort?: string;
    sourcePortConstraint?: DIRECTION;
    spacing?: number;
    spacingBottom?: number;
    spacingLeft?: number;
    spacingRight?: number;
    spacingTop?: number;
    startArrow?: ArrowType;
    startFill?: boolean;
    startSize?: number;
    strokeColor?: ColorValue;
    strokeOpacity?: number;
    strokeWidth?: number;
    swimlaneFillColor?: ColorValue;
    swimlaneLine?: boolean;
    targetJettySize?: number | 'auto';
    targetPerimeterSpacing?: number;
    targetPort?: string;
    targetPortConstraint?: DIRECTION;
    textDirection?: TextDirectionValue;
    textOpacity?: number;
    verticalAlign?: VAlignValue;
    verticalLabelPosition?: VAlignValue;
    whiteSpace?: WhiteSpaceValue;
};
export declare type NumericCellStateStyleKeys = NonNullable<{
    [k in keyof CellStateStyle]: CellStateStyle[k] extends number | undefined ? k : never;
}[keyof CellStateStyle]>;
export declare type ColorValue = string;
export declare type DirectionValue = 'north' | 'south' | 'east' | 'west';
export declare type TextDirectionValue = '' | 'ltr' | 'rtl' | 'auto';
export declare type AlignValue = 'left' | 'center' | 'right';
export declare type VAlignValue = 'top' | 'middle' | 'bottom';
export declare type OverflowValue = 'fill' | 'width' | 'auto' | 'hidden' | 'scroll' | 'visible';
export declare type WhiteSpaceValue = 'normal' | 'wrap' | 'nowrap' | 'pre';
export declare type ArrowType = 'none' | 'classic' | 'classicThin' | 'block' | 'blockThin' | 'open' | 'openThin' | 'oval' | 'diamond' | 'diamondThin';
export declare type ShapeValue<S> = 'rectangle' | 'ellipse' | 'doubleEllipse' | 'rhombus' | 'line' | 'image' | 'arrow' | 'arrowConnector' | 'label' | 'cylinder' | 'swimlane' | 'connector' | 'actor' | 'cloud' | 'triangle' | 'hexagon' | S;
export declare type CanvasState = {
    dx: number;
    dy: number;
    scale: number;
    alpha: number;
    fillAlpha: number;
    strokeAlpha: number;
    fillColor: ColorValue;
    gradientFillAlpha: number;
    gradientColor: ColorValue;
    gradientAlpha: number;
    gradientDirection: DirectionValue;
    strokeColor: ColorValue;
    strokeWidth: number;
    dashed: boolean;
    dashPattern: string;
    fixDash: boolean;
    lineCap: string;
    lineJoin: string;
    miterLimit: number;
    fontColor: ColorValue;
    fontBackgroundColor: ColorValue;
    fontBorderColor: ColorValue;
    fontSize: number;
    fontFamily: string;
    fontStyle: number;
    shadow: boolean;
    shadowColor: ColorValue;
    shadowAlpha: number;
    shadowDx: number;
    shadowDy: number;
    rotation: number;
    rotationCx: number;
    rotationCy: number;
    transform: string | null;
};
export interface Gradient extends SVGLinearGradientElement {
    mxRefCount: number;
}
export declare type GradientMap = {
    [k: string]: Gradient;
};
export interface GraphPluginConstructor {
    new (graph: Graph): GraphPlugin;
    pluginId: string;
}
export interface GraphPlugin {
    onDestroy: () => void;
}
export declare type Listener = {
    name: string;
    f: MouseEventListener | KeyboardEventListener;
};
export declare type ListenerTarget = {
    mxListenerList?: Listener[];
};
export declare type Listenable = (EventTarget | (Window & typeof globalThis)) & ListenerTarget;
export declare type MouseEventListener = (me: MouseEvent) => void;
export declare type KeyboardEventListener = (ke: KeyboardEvent) => void;
export declare type GestureEvent = Event & MouseEvent & {
    scale?: number;
    pointerId?: number;
};
export declare type MouseListenerSet = {
    mouseDown: (sender: EventSource, me: InternalMouseEvent) => void;
    mouseMove: (sender: EventSource, me: InternalMouseEvent) => void;
    mouseUp: (sender: EventSource, me: InternalMouseEvent) => void;
};
export declare type EventCache = GestureEvent[];
export interface CellHandle {
    state: CellState;
    cursor: string;
    image: ImageBox | null;
    shape: Shape | null;
    active: boolean;
    setVisible: (v: boolean) => void;
    processEvent: (me: InternalMouseEvent) => void;
    positionChanged: () => void;
    execute: (me: InternalMouseEvent) => void;
    reset: () => void;
    redraw: () => void;
    destroy: () => void;
}
export interface PopupMenuItem extends HTMLElement {
    table: HTMLElement;
    tbody: HTMLElement;
    div: HTMLElement;
    willAddSeparator: boolean;
    containsItems: boolean;
    activeRow: PopupMenuItem | null;
    eventReceiver: HTMLElement | null;
}
